<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

	<!-- 加载属性文件 -->
	<properties resource="db.properties">
		<!--properties中还可以配置一些属性名和属性值 -->
		<!-- 
		注意： MyBatis 将按照下面的顺序来加载属性：
			在 properties 元素体内定义的属性首先被读取。 
			然后会读取properties 元素中resource或 url 加载的属性，它会覆盖已读取的同名属性。 
			最后读取parameterType传递的属性，它会覆盖已读取的同名属性。具体解释如下：
		场景：比如说此时在classpath路径下存在一个名称为db.properties属性文件，并且在SqlMapConfig.xml中利用Properties元素加载了这个属性文件，其中db.properties文件的内容如下
		jdbc.driver=com.mysql.jdbc.Driver
		jdbc.url=jdbc:mysql://localhost:3306/mybatis
		jdbc.username=root
		jdbc.password=root
		在UserMapper.xml中定义了如下的一个查询
		<select id="findUserByName" parameterType="java.lang.String" resultType="com.zeek.mybatis3.po.User">
				SELECT * FROM USER WHERE username LIKE '%${jdbc.username}%'
			</select>
		注意这个查询中的参数名称为jdbc.username正好与db.perproties中的一个key为jdbc.username的重复
		若此时通过mapper接口的方式调用这个查询的话，实际上传递给findUserName的参数值就为root
		 -->
		<!-- <property name="jdbc.driver" value=""/> -->
	</properties>
	
	<!-- 对于settings的配置稍后讲解 -->
	 <settings>
	 	<!-- 开启延迟加载 -->
        <setting name="lazyLoadingEnabled" value="true"/>
        <setting name="aggressiveLazyLoading" value="false"/>
        <!-- 开启二级缓存，此值为二级缓存的总开关 -->
        <setting name="cacheEnabled" value="true"/>
    </settings>
	
	<!-- 别名定义 -->
	<typeAliases>
		<!-- 针对单个别名定义
		type：类型的路径
		alias：别名
		 -->
		<!-- <typeAlias type="com.zeek.mybatis3.po.User" alias="user"/> -->
		<!-- 批量别名定义 
		指定包名，mybatis自动扫描包中的po类，自动定义别名，别名就是类名（首字母大写或小写都可以）
		-->
		<package name="com.zeek.mybatis3.po"/>
	</typeAliases>

	<!-- 和spring整合后environments配置将移除 -->
	<environments default="development">
		<environment id="development">
			<!-- 使用JDBC事务管理，事务由mybatis控制 -->
			<transactionManager type="JDBC" />
			<dataSource type="POOLED">
				<property name="driver" value="${jdbc.driver}" />
				<property name="url" value="${jdbc.url}" />
				<property name="username" value="${jdbc.username}" />
				<property name="password" value="${jdbc.password}" />
			</dataSource>
		</environment>
	</environments>

	<!-- 加载映射文件 -->
	<mappers>
		<mapper resource="sqlmap/User.xml" />
		<!--通过resource方法一次加载一个映射文件 -->
		<!-- <mapper resource="mapper/UserMapper.xml" /> -->
		
		<!-- 通过mapper接口加载单个 映射文件
		遵循一些规范：需要将mapper接口类名和mapper.xml映射文件名称保持一致，且在一个目录 中
		上边规范的前提是：使用的是mapper代理方法
		 -->
		<!-- <mapper class="com.zeek.mybatis3.mapper.UserMapper"/> -->
		
		<!-- 批量加载mapper
		指定mapper接口的包名，mybatis自动扫描包下边所有mapper接口进行加载
		遵循一些规范：需要将mapper接口类名和mapper.xml映射文件名称保持一致，且在一个目录 中
		上边规范的前提是：使用的是mapper代理方法
		 -->
		<package name="com.zeek.mybatis3.mapper"/>
	</mappers>


</configuration>